{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.components.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMmonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAWeA,G,YARF,SAAAC,GAAK,OACd,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAASC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACrB,mCAAOL,EAAMI,QAAQE,KAArB,OACA,mCAAON,EAAMI,QAAQG,cCMdC,EATE,SAAAR,GAAK,OACnB,qBAAKC,UAAU,YAAf,SAEOD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC1B,cAAC,EAAD,CAAyBA,QAAUA,GAAvBA,EAAQC,UCIfM,G,MATG,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACV,uBACAZ,UAAU,SACVa,KAAK,SACLF,YAAcA,EACdG,SAAWF,MCiCJG,G,wDAnCf,aAAe,IAAD,8BACZ,gBAaFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAb1C,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAJH,E,gEAQO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAM,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,+BAOhC,IAAD,EAC2BC,KAAKN,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZU,EAAoBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC/CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAEhD,OACA,sBAAK9B,UAAU,MAAf,UACE,kDACF,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAce,KAAKf,eAEnB,cAAC,EAAD,CAAUJ,SAAWoB,W,GA/BXI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.cba5f596.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nconst Card = props => (\n    <div className='card-container'>\n        <img alt=\"monster\"src={`https://robohash.org/${props.monster.id}?set=set2&size=200x200`}/>\n        <h2> { props.monster.name } </h2>\n        <h3> { props.monster.email }</h3>\n    </div>\n);\n\nexport default Card;","import React from 'react';\nimport './card-list.styles.css';\nimport Card from '../card/card.component';\n\nconst CardList = props => (\n   <div className='card-list'>\n        {\n          props.monsters.map(monster => \n          <Card key={ monster.id } monster={ monster } />\n          )}\n    </div>\n);\n\nexport default CardList;\n","import React from 'react';\nimport './search-box.styles.css';\n\nconst SearchBox = ({ placeholder, handleChange }) => (\n        <input \n        className='search'\n        type='search' \n        placeholder={ placeholder }\n        onChange={ handleChange }\n    />\n)\n\nexport default SearchBox;","import React, { Component } from 'react';\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box/search-box.components';\nimport './App.css';\n\nclass App extends Component {\nconstructor() {\n  super();\n  this.state = {\n    monsters: [],\n    searchField: ''\n  };\n}\n\ncomponentDidMount() {\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then (users => this.setState({ monsters: users }));\n}\n\nhandleChange = event => {\n  this.setState({ searchField: event.target.value })\n}\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMmonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    \n      return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n      <SearchBox\n        placeholder='search monsters'\n        handleChange={this.handleChange}\n        />\n        <CardList monsters={ filteredMmonsters } />\n      </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}